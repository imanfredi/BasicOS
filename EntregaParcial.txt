Compilacion:

Para la compilacion del tp hay que usar los comandos originales del kernell.
Primero compilar Toolchain con make y luego compialr todo el kernel con make.

En caso de querer seleccionar el memory manager hay que hacerlo manualmente desde el makefile. 
Hay una constate que se llamam MM y esta definada con -UBUDDY, en este caso se usara el MM hecho
con freelist. Si se cambia esa constante por -DBUDDY y se hace un make clean, en la proxima compilacion 
el memory manager va a ser buddy.

---------------------------------------------------
Ejecucion:

Para ejecutarlo alcanza con usar el archivo run.sh. 
Una vez que se termine configurar el kernel, se le da el control al usuario en la terminal.
En este momento deberia haber un unico proceso corriendo y, esto deberia poder comprobarse usando el
comando "dumpScheduler" (equivalente a ps).

Esta implementado el test de memory manager provisto. Para ejecutarlo en background basta con 
llamar "testMM &" en la terminal. Lo del espacio & es nuestra forma de indicar que la funcion se 
desea correr en el background. Caso contrario se correran como funcion perdiendo el control del 
interprete de comando.

Respecto al manejo de procesos las funciones que son accesibles de la terminal son
- block, unblock y kill las cuales son llamadas con el pid del proceso (obtenido utilizando dumpScheduler)
- getpid para obtener el proceso de la terminal.
- changePriority (equivalente a nice) recibe el pid y luego la nueva prioridad del proceso (entre 0 y 4)

Respecto al memory manager, el unico comando disponible desde la shell es dumpMM, el cual permite visualizar 
el estado actual de la memoria. Aporta distinta informacion para cada uno d elos memory managers.

Respecto a los semaforos, todos las syscall asociadas son accesibles desde la terminal aunque su uso no es el mas practico. 
En el caso de hacer un sem open desde la terminal el nombre que se provee como identificador al semaforo 
proviene del buffer de lectura y no se le hace una copia, es por esto que no queda registrado un nombre fijo y 
depende de que no cambie el buffer de lectura del teclado. Fueron agregadas para testear y debugear y no pretendemos 
que queden disponibles para la entrga final.
En este caso, la funcion mas util puede ser dumpSem para verificar el estado de los semaforos que estan en uso.
Las demas funciones son:
- openSem: recibe un nombre identificador y el valor inicial del semaforo (si este ya existe el valor es ignorado)
y se devuelve el codigo identificador del semaforo en cuestion ( este identificador es tambien visible en dumpSem
bajo el nombre de codigo)
- closeSem: cierra el semaforo recibiendo como parametro el identificador de semaforo
- semWait: recibe un identificador de semaforo y realiza un wait
- semPost: recibe un identificador de semaforo y realiza un post

Por ultimo, esta disponible el comando help el cual lista los demas comandos disponibles de la terminal con una breve
descripcion de su funcionamiento, por si falto aclarar alguno. Otra alternativa es utilizar la funcion loadFunctions 
como documentacion. Ahi se pueden ver todas las funciones accesibles desde la terminal. Su nombre y su funcion asociada.

--------------------------------------
Los archivos que estan fuera de la carpeta RowDaBoat no son parte de la entrega

Integrantes:
- Brandy, Tobias
- Pannunzio, Faustino
- Sagues, Ignacio
- Villanueva, Ignacio